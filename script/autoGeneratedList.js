// autoGeneratedList.js - Packing list display and interaction logic
document.addEventListener('DOMContentLoaded', function() {
    console.log('autoGeneratedList.js loaded');
    displayAutoGeneratedPackingList();
    setupPackingListInteractions();
});

function displayAutoGeneratedPackingList() {
    const latestTrip = JSON.parse(sessionStorage.getItem('latestTrip'));
    
    if (latestTrip && latestTrip.packingList) {
        const packingList = latestTrip.packingList;
        
        console.log('Displaying packing list with categories:', Object.keys(packingList));
        
        // Display all categories in your existing HTML structure
        displayCategory('personalItems', 'Personal Items', packingList.personalItems);
        displayCategory('electronics', 'Electronics', packingList.electronics);
        displayCategory('utilities', 'Utilities', packingList.utilities);
        displayCategory('health', 'Health', packingList.health);
        displayCategory('clothes', 'Clothes', packingList.clothes);
        displayCategory('accessories', 'Accessories', packingList.accessories);
        displayCategory('footwear', 'Footwear', packingList.footwear);
        
        console.log('Auto-generated packing list displayed - ALL ITEMS UNCHECKED');
        
        // Load user's saved selections
        loadUserSelections();
    } else {
        console.log('No auto-generated packing list found in session storage');
        // Still display all categories even if no data
        displayAllCategories();
    }
}

function displayAllCategories() {
    const categories = [
        { id: 'personalItems', name: 'Personal Items' },
        { id: 'electronics', name: 'Electronics' },
        { id: 'utilities', name: 'Utilities' },
        { id: 'health', name: 'Health' },
        { id: 'clothes', name: 'Clothes' },
        { id: 'accessories', name: 'Accessories' },
        { id: 'footwear', name: 'Footwear' }
    ];
    
    categories.forEach(category => {
        displayCategory(category.id, category.name, []);
    });
}

function displayCategory(categoryId, categoryName, items) {
    // Find existing category container or create new one
    let categoryContainer = findCategoryContainer(categoryId);
    
    if (!categoryContainer) {
        categoryContainer = createCategoryElement(categoryId, categoryName);
        addCategoryToDOM(categoryContainer);
    }
    
    // Display items
    const itemList = categoryContainer.querySelector('.item-list');
    if (itemList && items) {
        itemList.innerHTML = '';
        items.forEach(item => {
            const itemElement = createPackingItemElement(item, categoryId, false);
            itemList.appendChild(itemElement);
        });
        console.log(`${categoryName} items displayed:`, items.length);
    }
}

function findCategoryContainer(categoryId) {
    // Try to find existing category by header text
    const headers = document.querySelectorAll('.category-header h3');
    for (let header of headers) {
        if (header.textContent === formatCategoryName(categoryId)) {
            return header.closest('.category');
        }
    }
    return null;
}

function createCategoryElement(categoryId, categoryName) {
    const categoryDiv = document.createElement('div');
    categoryDiv.className = 'category';
    categoryDiv.setAttribute('data-category', categoryId);
    
    categoryDiv.innerHTML = `
        <div class="category-header">
            <h3>${categoryName}</h3>
        </div>
        <div class="item-list">
            <!-- Items will be populated here -->
        </div>
        <div class="add-item-con">
            <i class="fas fa-plus-circle"></i>
            <p>Add ${categoryName}</p>
        </div>
    `;
    
    return categoryDiv;
}

function addCategoryToDOM(categoryContainer) {
    const mainList = document.querySelector('.main-list');
    if (mainList) {
        mainList.appendChild(categoryContainer);
    } else {
        console.error('Could not find .main-list container');
    }
}

function formatCategoryName(categoryId) {
    const nameMap = {
        'utilities': 'Utilities',
        'health': 'Health',
        'clothes': 'Clothes',
        'accessories': 'Accessories',
        'footwear': 'Footwear',
        'personalItems': 'Personal Items',
        'electronics': 'Electronics'
    };
    return nameMap[categoryId] || categoryId;
}

function createPackingItemElement(itemName, category, isChecked = false) {
    const itemDiv = document.createElement('div');
    itemDiv.className = 'packing-items';
    itemDiv.setAttribute('data-item-name', itemName);
    itemDiv.setAttribute('data-category', category);
    
    itemDiv.innerHTML = `
        <div class="item">
            <input type="checkbox" name="${itemName}" id="${category}-${itemName.replace(/\s+/g, '-')}" ${isChecked ? 'checked' : ''}>
            <label for="${category}-${itemName.replace(/\s+/g, '-')}">${itemName}</label>
        </div>
        <div class="item-btn" style="visibility: ${isChecked ? 'visible' : 'hidden'}; opacity: ${isChecked ? '1' : '0'}; transition: opacity 0.3s ease, visibility 0.3s ease;">
            <a href="#" class="edit-btn">Edit</a>
            <span></span>
            <a href="#" class="delete-btn">Delete</a>
        </div>
    `;
    return itemDiv;
}

function setupPackingListInteractions() {
    console.log('Setting up packing list interactions...');
    
    // Add new item functionality
    document.addEventListener('click', function(e) {
        if (e.target.closest('.add-item-con')) {
            const addItemCon = e.target.closest('.add-item-con');
            const categoryElement = addItemCon.closest('.category');
            const category = categoryElement.getAttribute('data-category');
            const categoryName = categoryElement.querySelector('.category-header h3').textContent;
            
            const newItem = prompt(`Add new ${categoryName} item:`);
            if (newItem && newItem.trim()) {
                const container = categoryElement.querySelector('.item-list');
                if (!container) {
                    console.warn('Could not find item list container');
                    return;
                }
                
                // New items added by user start UNCHECKED (buttons hidden)
                const itemElement = createPackingItemElement(newItem.trim(), category, false);
                container.appendChild(itemElement);
                
                console.log('New item added (unchecked, buttons hidden):', newItem.trim());
            }
        }
    });

 // Edit item functionality
document.addEventListener('click', function(e) {
    if (e.target.classList.contains('edit-btn') || e.target.textContent === 'Edit') {
        e.preventDefault();
        const itemElement = e.target.closest('.packing-items');
        
        if (!itemElement) {
            console.warn('Edit button not associated with packing item');
            return;
        }
        
        const oldName = itemElement.getAttribute('data-item-name');
        const category = itemElement.getAttribute('data-category');
        const label = itemElement.querySelector('label');
        
        if (!label) {
            console.warn('Could not find label element');
            return;
        }
        
        const newName = prompt('Edit item name:', label.textContent);
        if (newName && newName.trim()) {
            // ✅ ALWAYS update in user's packing list when edited
            updateItemInUserPackingList(oldName, newName.trim(), category);
            
            // Update DOM
            label.textContent = newName.trim();
            const input = itemElement.querySelector('input');
            if (input) {
                input.name = newName.trim();
                input.id = input.id.split('-')[0] + '-' + newName.trim().replace(/\s+/g, '-');
                label.setAttribute('for', input.id);
            }
            itemElement.setAttribute('data-item-name', newName.trim());
            
            console.log('✅ Item UPDATED in user packing list:', oldName, '→', newName.trim(), 'in', category);
        }
    }
});

// Delete item functionality
document.addEventListener('click', function(e) {
    if (e.target.classList.contains('delete-btn') || e.target.textContent === 'Delete') {
        e.preventDefault();
        const itemElement = e.target.closest('.packing-items');
        
        if (!itemElement) {
            console.warn('Delete button not associated with packing item');
            return;
        }
        
        const itemName = itemElement.getAttribute('data-item-name');
        const category = itemElement.getAttribute('data-category');
        
        // ✅ ALWAYS remove from user's packing list when deleted
        // First check if item exists in user packing list
        if (isItemInUserPackingList(itemName, category)) {
            removeItemFromUserPackingList(itemName, category);
            console.log('✅ Item DELETED from user packing list:', itemName, 'from', category);
        } else {
            console.log('Item not found in user packing list, no need to remove:', itemName);
        }
        
        // Add fade out animation
        itemElement.style.opacity = '0.5';
        itemElement.style.textDecoration = 'line-through';
        
        // Remove after delay
        setTimeout(() => {
            if (itemElement.parentNode) {
                itemElement.remove();
            }
        }, 500);
    }
});

    // Checkbox change handler - SAVE when checked, REMOVE when unchecked
    document.addEventListener('change', function(e) {
        if (e.target.type === 'checkbox') {
            const checkbox = e.target;
            const itemElement = checkbox.closest('.packing-items');
            
            if (!itemElement) {
                console.warn('Checkbox not associated with packing item');
                return;
            }
            
            const itemName = itemElement.getAttribute('data-item-name');
            const category = itemElement.getAttribute('data-category');
            const itemBtn = itemElement.querySelector('.item-btn');
            
            if (checkbox.checked) {
                // ✅ USER CHECKED - Add to user's packing list and SHOW buttons
                addItemToUserPackingList(itemName, category);
                
                // Show buttons with smooth transition
                if (itemBtn) {
                    itemBtn.style.visibility = 'visible';
                    itemBtn.style.opacity = '1';
                }
                
                console.log('✅ Item ADDED to user packing list, buttons shown:', itemName, 'in', category);
            } else {
                // ❌ USER UNCHECKED - Remove from user's packing list and HIDE buttons
                removeItemFromUserPackingList(itemName, category);
                
                // Hide buttons with smooth transition
                if (itemBtn) {
                    itemBtn.style.visibility = 'hidden';
                    itemBtn.style.opacity = '0';
                }
                
                console.log('❌ Item REMOVED from user packing list, buttons hidden:', itemName, 'from', category);
            }
            
            // Save user's selections
            saveUserSelections();
        }
    });

    console.log('Packing list interactions setup complete');
}

// USER PACKING LIST MANAGEMENT
function addItemToUserPackingList(itemName, category) {
    let userPackingList = getUserPackingList();
    
    // Initialize category if it doesn't exist
    if (!userPackingList[category]) {
        userPackingList[category] = [];
    }
    
    // Add item if not already in list
    if (!userPackingList[category].includes(itemName)) {
        userPackingList[category].push(itemName);
        saveUserPackingList(userPackingList);
        console.log('✅ Item saved to user packing list:', itemName, 'in', category);
    }
}

function removeItemFromUserPackingList(itemName, category) {
    let userPackingList = getUserPackingList();
    
    // Remove item from user's list
    if (userPackingList[category]) {
        userPackingList[category] = userPackingList[category].filter(item => item !== itemName);
        saveUserPackingList(userPackingList);
        console.log('✅ Item removed from user packing list:', itemName, 'from', category);
    }
}

function isItemInUserPackingList(itemName, category) {
    const userPackingList = getUserPackingList();
    return userPackingList[category] && userPackingList[category].includes(itemName);
}

function updateItemInUserPackingList(oldName, newName, category) {
    let userPackingList = getUserPackingList();
    
    if (userPackingList[category]) {
        const index = userPackingList[category].indexOf(oldName);
        if (index !== -1) {
            userPackingList[category][index] = newName;
            saveUserPackingList(userPackingList);
            console.log('✅ Item updated in user packing list:', oldName, '→', newName, 'in', category);
        } else {
            console.log('❌ Item not found in user packing list:', oldName);
        }
    } else {
        console.log('❌ Category not found in user packing list:', category);
    }
}

function getUserPackingList() {
    const userList = localStorage.getItem('userPackingList');
    return userList ? JSON.parse(userList) : {
        utilities: [],
        health: [],
        clothes: [],
        accessories: [],
        footwear: [],
        personalItems: [],
        electronics: []
    };
}

function saveUserPackingList(packingList) {
    localStorage.setItem('userPackingList', JSON.stringify(packingList));
    console.log('User packing list saved:', packingList);
}

// USER SELECTIONS MANAGEMENT (Checkbox states)
function saveUserSelections() {
    const checkboxes = document.querySelectorAll('input[type="checkbox"]');
    const checkboxStates = {};
    
    checkboxes.forEach(checkbox => {
        checkboxStates[checkbox.name] = checkbox.checked;
    });
    
    localStorage.setItem('userPackingListSelections', JSON.stringify(checkboxStates));
    console.log('User selections saved');
}

function loadUserSelections() {
    const savedSelections = localStorage.getItem('userPackingListSelections');
    if (savedSelections) {
        const checkboxStates = JSON.parse(savedSelections);
        const checkboxes = document.querySelectorAll('input[type="checkbox"]');
        
        checkboxes.forEach(checkbox => {
            if (checkboxStates.hasOwnProperty(checkbox.name)) {
                checkbox.checked = checkboxStates[checkbox.name];
                
                // Update button visibility based on checked state
                const itemElement = checkbox.closest('.packing-items');
                const itemBtn = itemElement ? itemElement.querySelector('.item-btn') : null;
                
                if (itemBtn) {
                    if (checkbox.checked) {
                        itemBtn.style.visibility = 'visible';
                        itemBtn.style.opacity = '1';
                    } else {
                        itemBtn.style.visibility = 'hidden';
                        itemBtn.style.opacity = '0';
                    }
                }
            }
        });
        console.log('User selections loaded from localStorage');
    } else {
        // First load - ensure all items are unchecked and buttons hidden
        forceAllItemsUnchecked();
    }
}

function forceAllItemsUnchecked() {
    const checkboxes = document.querySelectorAll('input[type="checkbox"]');
    checkboxes.forEach(checkbox => {
        checkbox.checked = false;
        const itemElement = checkbox.closest('.packing-items');
        const itemBtn = itemElement ? itemElement.querySelector('.item-btn') : null;
        
        if (itemBtn) {
            itemBtn.style.visibility = 'hidden';
            itemBtn.style.opacity = '0';
        }
    });
    console.log('All items set to unchecked, buttons hidden');
}

// Get user's final packing list
function getUserFinalPackingList() {
    return getUserPackingList();
}

// Export functions for testing (optional)
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        displayAutoGeneratedPackingList,
        createPackingItemElement,
        setupPackingListInteractions,
        getUserFinalPackingList
    };
}